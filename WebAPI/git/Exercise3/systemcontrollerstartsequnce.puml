@startuml


Main -> SystemManager: runSystem()
SystemManager -> SystemManager: Initialize CommandController
SystemManager -> MainThread : Start MainThread & SettingsListener
MainThread -> CommandController: initialize(MsgQueue * msg)
CommandController -> CommandController: Initialize PsocComm, WebComm and CommandQueue
CommandController -> PsocComm: uartListenerThread(MsgQueue * msg)
PsocComm -> PSoCThread: Start thread
group loop
    PSoCThread -> PsocComm: receiveUART()
    MainThread -> MainThread: Check if feedingtime
    group feedingtime
        MainThread -> CommandController: addCommand("F100")
        CommandController -> PsocComm: relayCommand("F100")
        PsocComm -> PsocComm: sendUART("F100")
        PsocComm -> PsocComm: receiveUART()
        group errorReturned
            PsocComm -> PsocComm:sendUART("F100")
        end
    end
    group TreatRequested
        DispenserController -> PSoCThread: Event
        PSoCThread -> MainThread: MsgQueue("Event")
        MainThread -> CommandController:addCommand("Event")
        CommandController -> WebComm: MakeRequestThread(MsgQueue * )
        WebComm -> RequestThread:Start Thread
        RequestThread -> WebComm: connectToServer()
        RequestThread -> WebComm: createTCPSocket()
        RequestThread -> WebComm: sendTCPMessage()
        RequestThread -> WebComm: receiveTCPMessage()
        WebComm --> RequestThread: return RequestResponse
        RequestThread -> MainThread: MsgQueue("RequestRepsonse")
        group If response affirmative
            MainThread -> CommandController: addCommand("Treat")
            CommandController -> PsocComm: relayCommand("Treat")
            PsocComm -> PsocComm: sendUART("Treat")
            PsocComm -> PsocComm: receiveUART()
        end
    end

end
@enduml